{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","getBookQuery","_templateObject3","addBookMutation","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","console","log","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_esm","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9ff3bb9d.chunk.js","sourcesContent":["import {gql} from 'apollo-boost'; // need this to construct queries\n\nconst getBooksQuery = gql`\n  {\n    books{\n      name\n      id\n    }\n  }\n`\n\nconst getAuthorsQuery = gql`\n  {\n    authors{\n      name\n      id\n    }\n  }\n`\n\nconst getBookQuery = gql`\n  query($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author{\n        name\n        age\n        id\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`\n\nexport {getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery}","import React, { Component } from 'react';\nimport {graphql} from 'react-apollo' // the package helps us bind apollo to react; glues it together\nimport {getBookQuery} from '../queries/queries'\n\nclass BookDetails extends Component {\n\n  displayBookDetails() {\n    const {book} = this.props.data; // const book = this.props.data.book\n    if(book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul className=\"other-books\">\n            {\n              book.author.books.map(item =>{\n                return <li key={item.id}>{item.name}</li>\n              })\n            }\n          </ul>\n        </div>\n      )\n    } else {\n      return (\n        <div>No book selected...</div>\n      )\n    }\n  };\n\n  render() {\n    // console.log(this.props)\n\n    return (\n      <div id=\"book-details\">\n        {this.displayBookDetails()}\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: (props) => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    }\n  }\n})(BookDetails)","import React, { Component } from 'react';\nimport {graphql} from 'react-apollo' // the package helps us bind apollo to react; glues it together\n\nimport {getBooksQuery} from '../queries/queries'; // retrieves the list of books\n\n// components\nimport BookDetails from './BookDetails';\n\n\nclass BookList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null\n    }\n  };\n\n  displayBooks() {\n    var data = this.props.data\n    \n    if(data.loading) {\n      return( <div>Loading Books...</div> );\n    } else {\n      return data.books.map(book => {\n        return (\n          <li key={book.id} onClick={ (e) => {this.setState({selected: book.id})}}>{book.name}</li>\n        );\n      })\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <ul id=\"book-list\">\n          {this.displayBooks()}\n        </ul>\n        <BookDetails bookId={this.state.selected}/>\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);","import React, { Component } from 'react';\nimport {graphql, compose} from 'react-apollo'; // the package helps us bind apollo to react; glues it together\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from '../queries/queries';\n\nclass AddBook extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      genre: \"\",\n      authorId: \"\"\n    };\n  }\n\n  displayAuthors() {\n    var data = this.props.getAuthorsQuery;\n    console.log(data)\n    if(data.loading) {\n      return ( <option disabled>Loading authors...</option> )\n    } else {\n      return data.authors.map(author => {\n        return ( <option key={author.id} value={author.id}>{author.name}</option> )\n      })\n    }\n  };\n\n  submitForm(e) {\n    e.preventDefault();\n    // console.log(this.state)\n    this.props.addBookMutation({\n      variables: {\n        name: this.state.name,\n        genre: this.state.genre,\n        authorId: this.state.authorId\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    })\n  }\n\n  render() {\n    return (\n      <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n\n        <div className=\"field\">\n          <label>Book name:</label>\n          <input type=\"text\" onChange={(e)=> this.setState({ name: e.target.value })}/>\n        </div>\n\n        <div className =\"field\">\n          <label>Genre</label>\n          <input type=\"text\" onChange={(e)=> this.setState({ genre: e.target.value })}/>\n        </div>\n\n        <div className=\"field\">\n          <label>Author:</label>\n          <select onChange={(e)=> this.setState({ authorId: e.target.value })}>\n            <option>Select author</option>\n            {this.displayAuthors()}\n          </select>\n\n          <button>+</button>\n        </div>\n        \n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\"}),\n  graphql(addBookMutation, {name: \"addBookMutation\"})\n)(AddBook);","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo'; // this allows react to understand apollo\n\n// components\nimport BookList from \"./components/BookList\";\nimport AddBook from './components/AddBook';\n\n// apollo client setup\n\nconst  client = new ApolloClient({\n  uri: 'http://localhost:3500/graphql'\n})\n// registered on the frontend here to say we're making requests to above endpoint from this application\n// below we wrap our app in Apollo provider to enable us to get the data from above endpoint and inject it into whatever inside the Apollo provider\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Wisdom's Reading List</h1>\n        <BookList/>\n        <AddBook/>\n      </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}